% Solve a Clustering Problem with a Self-Organizing Map
% Script generated by NCTOOL
% Created Fri Dec 06 18:18:03 EST 2013
%
% This script assumes these variables are defined:
%
%   ulocs - input data.

function [net, clustering, outputs] = movie_user_som(ulocs, dim1, dim2, display) 

inputs = ulocs';

% Create a Self-Organizing Map
dimension1 = dim1;
dimension2 = dim2;
net = selforgmap([dimension1 dimension2]);

% Train the Network
% [net,tr] = train(net,inputs,'useParallel', 'yes',  'useGPU','yes');
 [net,tr] = train(net,inputs); 

% Test the Network
outputs = net(inputs);

if display 

    % View the Network
    view(net)

    % Plots
    % Uncomment these lines to enable various plots.
    % figure, plotsomtop(net)
    % figure, plotsomnc(net)
    % figure, plotsomnd(net)
    % figure, plotsomplanes(net)
    % figure, plotsomhits(net,inputs)
    figure, plotsompos(net,inputs)
end; 

 %Close parallel if the parallel toolbox is installed
 
 % cluster points can be retrieved by looking at net.IW
 % for example, if ulocs is a Nx2 array, then net.IW{1} 
 % contains an dim1xdim2 x 2 array of cluster points 
 
 % clusters = zeros(dim1*dim2,size(ulocs,2)); 
 
 clusters = net.IW{1}; 
 
clustering = zeros(size(ulocs,1),1); 

for u=1:size(ulocs,1)  % for each user, determine cluster center 
    
    ufactors = ulocs(u,:);  
    
    distances = clusters - repmat(ufactors,size(clusters,1),1);  % compute distances to each cluster
    
    l2distances = sqrt(sum(distances.^2,2)); 
    
    [dclosest didx] = min(l2distances); % find closest cluster
    
    clustering(u) = didx; 
end; 


    
  
